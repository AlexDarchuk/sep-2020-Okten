Index: ../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// // - Создать произвольный елемент с id = text.  Используя JavaScript, сделайте так, чтобы при клике на кнопку исчезал элемент с id=\"text\".\r\n// // - Создайте кнопку, при клике на которую, она будет скрывать сама себя.\r\n\r\n// let block = document.createElement('div');\r\n// block.setAttribute('id', 'text');\r\n// document.body.appendChild(block);\r\n\r\n// let btnHideBlock = document.createElement('button');\r\n// btnHideBlock.setAttribute('class', 'btnHide');\r\n// btnHideBlock.innerText = 'Hide!!!!!';\r\n// document.body.appendChild(btnHideBlock);\r\n\r\n// btnHideBlock.onclick = (ev) => {\r\n//     block.style.display = 'none';\r\n//     btnHideBlock.style.display = 'none';\r\n// }\r\n\r\n// // - створити інпут який приймає вік людини та кнопку яка підтверджує дію.\r\n// // При натисканні на кнопку зчитати інформацію з інпуту та перевірити вік чи меньше він ніж 18,\r\n// //  та повідомити про це користувача\r\n\r\n// let form = document.forms.form;\r\n// let actionText = form.actionText;\r\n\r\n// form.submit.addEventListener('click', ev => {\r\n//       ev.preventDefault();\r\n//       if(actionText.value > 18) {\r\n//           alert('Ваш вік більше 18!');\r\n//           actionText.value = '';\r\n//       } else {\r\n//           alert('Покиньтe сторінку!');\r\n//           actionText.value = '';\r\n//       }\r\n//      });\r\n\r\n//     //  - Создайте меню, которое раскрывается/сворачивается при клике\r\n\r\n//     let menu = document.querySelector('.menu');\r\n//     let btnHideMenu = document.querySelector('.hide')\r\n\r\n//     btnHideMenu.onclick = (ev) => {\r\n//         if (menu.style.height === '100%') {\r\n//             menu.style.height = '0'\r\n//             btnHideMenu.innerText = 'SHOW!';\r\n//             return;\r\n//         }\r\n//             menu.style.height = '100%'\r\n//             btnHideMenu.innerText = 'HIDE!';\r\n//     };\r\n\r\n// // - Создать список комментариев , пример объекта коментария - {title : 'lorem', body:'lorem ipsum dolo sit ameti'}.\r\n// // Вывести список комментариев в документ, каждый в своем блоке.\r\n// // Добавьте каждому комментарию по кнопке для сворачивания его body.\r\n\r\n// let cars = [\r\n//     {producer: 'Audi', price: 22000, color: 'White'},\r\n//     {producer: 'Bmw', price: 18000, color: 'Black'},\r\n//     {producer: 'Mazda', price: 28000, color: 'Blue'},\r\n//     {producer: 'Mercedes', price: 25000, color: 'Red'},\r\n//     {producer: 'Toyota',  price: 20000, color: 'Gray'},\r\n// ];\r\n\r\n\r\n\r\n// cars.forEach(user => {\r\n//     let div = document.createElement('div');\r\n//     div.innerText = `producer: ${cars.producer}; age: ${cars.price}; color: ${cars.color}`;\r\n    \r\n//     div.style.backgroundColor = 'red';\r\n//     div.style.margin = '30px';\r\n\r\n//     let btn = document.createElement('button');\r\n//     btn.innerText = 'DELETE!';\r\n\r\n//     btn.onclick = (ev) => {\r\n//       ev.target.parentElement.style.display = 'none'\r\n//     }\r\n//     div.appendChild(btn);\r\n//     document.body.appendChild(div);\r\n//   })\r\n\r\n// //   - створити 2 форми  по 2 інпути в кожній. ствоирити кнопку при кліку на яку считується \r\n// //   та виводиться на консоль інформація з цих 2х форм.\r\n// //   Кнопка повинна лежати за межами форм (Щоб ьуникнути  перезавантаження сторінки)\r\n// //   Доступ до інпутів через Forms API. Отже дайте формі та інпутам всі необхідні атрибути.\r\n\r\n// let formBtn = document.querySelector('#formBtn');\r\n// let form2 = document.forms.form2\r\n// let form3 = document.forms.form3\r\n\r\n// let textAc2 = form2.actionText2;\r\n// let numberAc = form2.actionNamber;\r\n\r\n// let textAc = form3.actionText;\r\n// let passAc = form3.actionPass;\r\n\r\n// formBtn.onclick = (ev) => {\r\n//     ev.preventDefault();\r\n//     console.log(passAc.value);\r\n//     console.log(numberAc.value);\r\n//     console.log(textAc.value);\r\n//     console.log(passAc.value);\r\n//     passAc.value = '';\r\n// };\r\n\r\n// // - Створити функцію, яка генерує таблицю.\r\n// // Перший аргумент визначає кількість строк.\r\n// // Другий параметр визначає кліькіть ячеєк в кожній строці.\r\n// // Третій параметр визначає елемент в який потрібно таблицю додати.\r\n\r\n// // let blockTable = document.querySelector('.table');\r\n\r\n// // function tableGener (tr, td, block) {\r\n// //     let table = document.createElement('table');\r\n// //         table.setAttribute('border', '1');\r\n// //         table.style.width = '300px';\r\n// //         table.style.height = '300px';\r\n    \r\n// //     for (let i = 1; i < tr; i++) {\r\n// //         let tr = document.createElement('tr');\r\n// //             tr.innerText = `${i}`;\r\n// //             table.appendChild(tr);\r\n// //         for (let j = 1; j < td; j++) {\r\n// //             let td = document.createElement('td');\r\n// //                 td.innerText = `${j}`;\r\n// //             tr.appendChild(td);\r\n// //         }\r\n// //     }\r\n// //     block.appendChild(table);\r\n// // }\r\n// // tableGener(10, 10, blockTable);\r\n\r\n// // - Створити 3 инпута та кнопку. Один визначає кількість рядків, другий - кількість ячеєк, третій вмиіст ячеєк.\r\n// // При натисканні кнопки, вся ця інформація зчитується і формується табличка, з відповідним вмістом.\r\n// // (Додатковачастина для завдання)\r\n\r\n// let blockTable = document.querySelector('.myTable');\r\n// let tableBtn = document.querySelector('#tableBtn');\r\n// let inputTh = document.forms.formTabl.inputTh;\r\n// let inputTd = document.forms.formTabl.inputTd;\r\n// let inputTdIn = document.forms.formTabl.inputTdIn;\r\n\r\n// tableBtn.addEventListener('click', (ev) => {\r\n\r\n//     tableGener(inputTh.value, inputTd.value, inputTdIn.value, blockTable);\r\n   \r\n// });\r\n\r\n\r\n// function tableGener (tr,td,numberTd,block) {\r\n//     block.innerHTML = '';\r\n//     let table = document.createElement('table');\r\n//         table.setAttribute('border', '1');\r\n//         table.style.width = '300px';\r\n//         table.style.height = '300px';\r\n    \r\n//     for (let i = 1; i <= tr; i++) {\r\n//         let tr = document.createElement('tr');\r\n//             tr.innerText = `${i}`;\r\n//             table.appendChild(tr);\r\n//         for (let j = 1; j <= td; j++) {\r\n//             let td = document.createElement('td');\r\n//                 td.innerText = `${numberTd}`;\r\n//             tr.appendChild(td);\r\n//         }\r\n//     }\r\n//     block.appendChild(table);\r\n// }\r\n\r\n// // - Напишите «Карусель» – ленту изображений, которую можно листать влево-вправо нажатием на стрелочки.\r\n\r\n// let img = document.querySelectorAll('.carousel__img');\r\n// let nextBtn = document.querySelector('.next');\r\n// let prevBtn = document.querySelector('.prev');\r\n// let vievSlide = 0;\r\n\r\n// function showSlides(n) {\r\n//     if (n > img.length) {\r\n//         vievSlide = 1;\r\n//     }\r\n//     if (n < 1) {\r\n//         vievSlide = img.length;\r\n//     }\r\n//     img.forEach(item => item.style.display = 'none');\r\n//     img[vievSlide-1].style.display = 'block';\r\n// }\r\n\r\n// showSlides(vievSlide);\r\n\r\n// nextBtn.addEventListener('click', () => {\r\n//     showSlides(vievSlide += 1)\r\n// });\r\n// prevBtn.addEventListener('click', () => {\r\n//     showSlides(vievSlide += -1)\r\n// });\r\n\r\n\r\n// - Сворити масив не цензцрних слів.\r\n// Сворити інпут текстового типу.\r\n// Якщо людина вводить слово і воно міститься в масиві не цензурних слів\r\n// кинути алерт з попередженням.\r\n// Перевірку робити при натисканні на кнопку\r\n\r\n// - Сворити масив не цензцрних слів.\r\n// Сворити інпут текстового типу.\r\n// Потрібно перевіряти чи не містить ціле речення в собі погані слова.\r\n// Кинути алерт з попередженням у випадку якщо містить.\r\n// Перевірку робити при натисканні на кнопку\r\n\r\n\r\n// let words = ['дідько', 'грець', 'рило', 'бахур', 'джмелик', 'живчик'];\r\n\r\n\r\n// let inputWords = document.querySelector('input[name=inputWord]');\r\n// let wordsBtn = document.querySelector('div.word button');\r\n// wordsBtn.addEventListener('click', () =>{\r\n// let aaa = -1;\r\n//     for (const word of words) {\r\n//         console.log(word);\r\n//         if(aaa < 0) aaa = document.forms.formWord.inputWord.value.indexOf(word);\r\n//         console.log(aaa);\r\n//     }\r\n//     alert(aaa === -1 ? 'Іди в гінделик повчися!' : 'Чувак ти багато знаєш!');\r\n// });\r\n\r\n\r\n\r\n// -- создать скрипт, который берет считывает на странице (rules.html) текст и делает сбоку меню-оглавление по всем заголовкам которые есть в тексте.\r\n// При клике на пункт оглавления вы должны отправляться к этому пункту в тексте\r\n\r\n// let h2 = document.getElementsByTagName('h2');\r\n// let content = document.getElementById('content');\r\n// let wrap = document.getElementById('wrap');\r\n// let ul = document.createElement('ul');\r\n\r\n// for (let i = 0; i < h2.length; i++) {\r\n//     let li= document.createElement('li');\r\n//     let a = document.createElement('a');\r\n//     let link = 'link' + i;\r\n//     a.href = '#' + link;\r\n//     h2[i].setAttribute('id' , link);\r\n//     a.innerHTML = h2[i].innerText;\r\n//     li.appendChild(a);\r\n//     ul.appendChild(li);\r\n// }\r\n\r\n// content.appendChild(ul);\r\n// content.style.width = '30%';\r\n// wrap.style.width = '70%';\r\n// content.style.float = 'left';\r\n// wrap.style.float = 'left';\r\n\r\n// -- взять массив пользователей\r\n// Создать три чекбокса. Каждый из них активирует фильтр для вышеуказаного массива. Фильтры могут работать как вместе так и по отдельности.\r\n// 1й - отфильтровывает пользователей со статусом false (осталяет со статусом false)\r\n// 2й - оставляет старше 29 лет включительно\r\n// 3й - оставляет тех у кого город киев\r\n// Данные выводить в документ\r\nlet usersWithAddress = [\r\n                {id:1,name: 'vasya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 16}},\r\n                {id:2,name: 'petya', age: 30, status: true, address: {city: 'Kyiv', street: 'Shevchenko', number: 1}},\r\n                {id:3,name: 'kolya', age: 29, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 121}},\r\n                {id:4,name: 'olya', age: 28, status: false, address: {city: 'Ternopil', street: 'Shevchenko', number: 90}},\r\n                {id:5,name: 'max', age: 30, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 115}},\r\n                {id:6,name: 'anya', age: 31, status: false, address: {city: 'Kyiv', street: 'Shevchenko', number: 2}},\r\n                {id:7,name: 'oleg', age: 28, status: false, address: {city: 'Ternopil', street: 'Shevchenko', number: 22}},\r\n                {id:8,name: 'andrey', age: 29, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 43}},\r\n                {id:9,name: 'masha', age: 30, status: true, address: {city: 'Kyiv', street: 'Shevchenko', number: 12}},\r\n                {id:10,name: 'olya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 16}},\r\n                {id:11,name: 'max', age: 31, status: true, address: {city: 'Ternopil', street: 'Shevchenko', number: 121}}\r\n            ];\r\n\r\nlet content = document.getElementById('content');\r\nlet filterContent = document.createElement('div');\r\nfilterContent.appendChild(filterUsers(usersWithAddress));\r\n\r\n\r\nlet input1 = document.createElement('input');\r\nlet input2 = document.createElement('input');\r\nlet input3 = document.createElement('input');\r\n\r\nlet label1 = document.createElement('label');\r\nlet label2 = document.createElement('label');\r\nlet label3 = document.createElement('label');\r\n\r\nlet btn = document.createElement('button');\r\n    btn.innerText = 'Відсіяти';\r\n\r\nlabel1.innerText = 'Статус fslse';\r\nlabel2.innerText = 'Старші 29 років';\r\nlabel3.innerText = 'Проживають у місті київ';\r\n\r\ninput1.type = 'checkbox';\r\ninput2.type = 'checkbox';\r\ninput3.type = 'checkbox';\r\n\r\ncontent.appendChild(filterContent);\r\ncontent.appendChild(label1);\r\ncontent.appendChild(input1);\r\ncontent.appendChild(label2);\r\ncontent.appendChild(input2);\r\ncontent.appendChild(label3);\r\ncontent.appendChild(input3);\r\ncontent.appendChild(btn);\r\n\r\nbtn.onclick = (ev) => {\r\n    let myUser = JSON.parse(JSON.stringify(usersWithAddress));\r\n\r\n    if(input1.checked) myUser = myUser.filter((value) => !value.status);\r\n    if(input2.checked) myUser = myUser.filter((value) => value.age >= 29);\r\n    if(input3.checked) myUser = myUser.filter((value) => value.address.city ==='Kyiv');\r\n\r\n    filterContent.innerHTML = '';\r\n    filterContent.appendChild(filterUsers(myUser));\r\n}\r\n\r\nfunction filterUsers (arr) {\r\n    let main = document.createElement('div');\r\n    arr.forEach(item => {\r\n        let block = document.createElement('div');\r\n        let h3 = document.createElement('h3');\r\n        block.innerHTML = JSON.stringify(item);\r\n        main.appendChild(block);\r\n    });\r\n    return main;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js b/../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js
--- a/../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js	
+++ b/../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js	
@@ -214,6 +214,7 @@
 // let inputWords = document.querySelector('input[name=inputWord]');
 // let wordsBtn = document.querySelector('div.word button');
 // wordsBtn.addEventListener('click', () =>{
+//    debugger;
 // let aaa = -1;
 //     for (const word of words) {
 //         console.log(word);
@@ -256,71 +257,71 @@
 // 2й - оставляет старше 29 лет включительно
 // 3й - оставляет тех у кого город киев
 // Данные выводить в документ
-let usersWithAddress = [
-                {id:1,name: 'vasya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 16}},
-                {id:2,name: 'petya', age: 30, status: true, address: {city: 'Kyiv', street: 'Shevchenko', number: 1}},
-                {id:3,name: 'kolya', age: 29, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 121}},
-                {id:4,name: 'olya', age: 28, status: false, address: {city: 'Ternopil', street: 'Shevchenko', number: 90}},
-                {id:5,name: 'max', age: 30, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 115}},
-                {id:6,name: 'anya', age: 31, status: false, address: {city: 'Kyiv', street: 'Shevchenko', number: 2}},
-                {id:7,name: 'oleg', age: 28, status: false, address: {city: 'Ternopil', street: 'Shevchenko', number: 22}},
-                {id:8,name: 'andrey', age: 29, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 43}},
-                {id:9,name: 'masha', age: 30, status: true, address: {city: 'Kyiv', street: 'Shevchenko', number: 12}},
-                {id:10,name: 'olya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 16}},
-                {id:11,name: 'max', age: 31, status: true, address: {city: 'Ternopil', street: 'Shevchenko', number: 121}}
-            ];
+// let usersWithAddress = [
+//                 {id:1,name: 'vasya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 16}},
+//                 {id:2,name: 'petya', age: 30, status: true, address: {city: 'Kyiv', street: 'Shevchenko', number: 1}},
+//                 {id:3,name: 'kolya', age: 29, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 121}},
+//                 {id:4,name: 'olya', age: 28, status: false, address: {city: 'Ternopil', street: 'Shevchenko', number: 90}},
+//                 {id:5,name: 'max', age: 30, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 115}},
+//                 {id:6,name: 'anya', age: 31, status: false, address: {city: 'Kyiv', street: 'Shevchenko', number: 2}},
+//                 {id:7,name: 'oleg', age: 28, status: false, address: {city: 'Ternopil', street: 'Shevchenko', number: 22}},
+//                 {id:8,name: 'andrey', age: 29, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 43}},
+//                 {id:9,name: 'masha', age: 30, status: true, address: {city: 'Kyiv', street: 'Shevchenko', number: 12}},
+//                 {id:10,name: 'olya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 16}},
+//                 {id:11,name: 'max', age: 31, status: true, address: {city: 'Ternopil', street: 'Shevchenko', number: 121}}
+//             ];
 
-let content = document.getElementById('content');
-let filterContent = document.createElement('div');
-filterContent.appendChild(filterUsers(usersWithAddress));
+// let content = document.getElementById('content');
+// let filterContent = document.createElement('div');
+// filterContent.appendChild(filterUsers(usersWithAddress));
 
 
-let input1 = document.createElement('input');
-let input2 = document.createElement('input');
-let input3 = document.createElement('input');
+// let input1 = document.createElement('input');
+// let input2 = document.createElement('input');
+// let input3 = document.createElement('input');
 
-let label1 = document.createElement('label');
-let label2 = document.createElement('label');
-let label3 = document.createElement('label');
+// let label1 = document.createElement('label');
+// let label2 = document.createElement('label');
+// let label3 = document.createElement('label');
 
-let btn = document.createElement('button');
-    btn.innerText = 'Відсіяти';
+// let btn = document.createElement('button');
+//     btn.innerText = 'Відсіяти';
 
-label1.innerText = 'Статус fslse';
-label2.innerText = 'Старші 29 років';
-label3.innerText = 'Проживають у місті київ';
+// label1.innerText = 'Статус fslse';
+// label2.innerText = 'Старші 29 років';
+// label3.innerText = 'Проживають у місті київ';
 
-input1.type = 'checkbox';
-input2.type = 'checkbox';
-input3.type = 'checkbox';
+// input1.type = 'checkbox';
+// input2.type = 'checkbox';
+// input3.type = 'checkbox';
 
-content.appendChild(filterContent);
-content.appendChild(label1);
-content.appendChild(input1);
-content.appendChild(label2);
-content.appendChild(input2);
-content.appendChild(label3);
-content.appendChild(input3);
-content.appendChild(btn);
+// content.appendChild(filterContent);
+// content.appendChild(label1);
+// content.appendChild(input1);
+// content.appendChild(label2);
+// content.appendChild(input2);
+// content.appendChild(label3);
+// content.appendChild(input3);
+// content.appendChild(btn);
 
-btn.onclick = (ev) => {
-    let myUser = JSON.parse(JSON.stringify(usersWithAddress));
+// btn.onclick = (ev) => {
+//     let myUser = JSON.parse(JSON.stringify(usersWithAddress));
 
-    if(input1.checked) myUser = myUser.filter((value) => !value.status);
-    if(input2.checked) myUser = myUser.filter((value) => value.age >= 29);
-    if(input3.checked) myUser = myUser.filter((value) => value.address.city ==='Kyiv');
+//     if(input1.checked) myUser = myUser.filter((value) => !value.status);
+//     if(input2.checked) myUser = myUser.filter((value) => value.age >= 29);
+//     if(input3.checked) myUser = myUser.filter((value) => value.address.city ==='Kyiv');
 
-    filterContent.innerHTML = '';
-    filterContent.appendChild(filterUsers(myUser));
-}
+//     filterContent.innerHTML = '';
+//     filterContent.appendChild(filterUsers(myUser));
+// }
 
-function filterUsers (arr) {
-    let main = document.createElement('div');
-    arr.forEach(item => {
-        let block = document.createElement('div');
-        let h3 = document.createElement('h3');
-        block.innerHTML = JSON.stringify(item);
-        main.appendChild(block);
-    });
-    return main;
-}
\ No newline at end of file
+// function filterUsers (arr) {
+//     let main = document.createElement('div');
+//     arr.forEach(item => {
+//         let block = document.createElement('div');
+//         let h3 = document.createElement('h3');
+//         block.innerHTML = JSON.stringify(item);
+//         main.appendChild(block);
+//     });
+//     return main;
+// }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"88218c66-a24e-4184-a362-5e7d05e24aed\" name=\"Default Changelist\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/components/user/User.js\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/components/users/Users.js\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/services/serviceUser/UserService.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../.gitignore\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../.gitignore\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../02.11.2020-JS-DOM-home_task/task2/js/main.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../02.11.2020-JS-DOM-home_task/task2/js/main.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../03.11.2020-JS-Function-Home_Task/js/main.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../03.11.2020-JS-Function-Home_Task/js/main.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../../27.10.2020 -js-home_task/js/main.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../../27.10.2020 -js-home_task/js/main.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.eslintcache\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.eslintcache\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/package-lock.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/package-lock.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/package.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/package.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/App.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/App.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/comment/Comment.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/comment/Comment.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/comments/Comments.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/comments/Comments.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/post/PostComponent.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/post/PostComponent.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/posts/Posts.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/posts/Posts.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/services/serviceComment/CommentService.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/services/serviceComment/CommentService.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/services/servicePost/PostService.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/services/servicePost/PostService.js\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaScript File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/../..\" value=\"react-lesson-05.12\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/../..\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedIndex\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1l75ytpjlXCMyupxPYIIHaWXZDt\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.path.for.package.eslint\" value=\"project\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"editing.templates\" />\r\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"88218c66-a24e-4184-a362-5e7d05e24aed\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1606935563163</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1606935563163</updated>\r\n      <workItem from=\"1606935573448\" duration=\"673000\" />\r\n      <workItem from=\"1606995486689\" duration=\"7789000\" />\r\n      <workItem from=\"1607325366693\" duration=\"6396000\" />\r\n      <workItem from=\"1607412437493\" duration=\"9542000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -2,26 +2,12 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="88218c66-a24e-4184-a362-5e7d05e24aed" name="Default Changelist" comment="">
-      <change afterPath="$PROJECT_DIR$/src/components/user/User.js" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/components/users/Users.js" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/services/serviceUser/UserService.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../../.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/../../.gitignore" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../../02.11.2020-JS-DOM-home_task/task2/js/main.js" beforeDir="false" afterPath="$PROJECT_DIR$/../../02.11.2020-JS-DOM-home_task/task2/js/main.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../../03.11.2020-JS-Function-Home_Task/js/main.js" beforeDir="false" afterPath="$PROJECT_DIR$/../../03.11.2020-JS-Function-Home_Task/js/main.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js" beforeDir="false" afterPath="$PROJECT_DIR$/../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js" beforeDir="false" afterPath="$PROJECT_DIR$/../../12.11.2020-JS-ActionOnPage-Home_Task/js/main.js" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../../27.10.2020 -js-home_task/js/main.js" beforeDir="false" afterPath="$PROJECT_DIR$/../../27.10.2020 -js-home_task/js/main.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.eslintcache" beforeDir="false" afterPath="$PROJECT_DIR$/.eslintcache" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/package-lock.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/package.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/App.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/App.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/comment/Comment.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/comment/Comment.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/comments/Comments.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/comments/Comments.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/post/PostComponent.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/post/PostComponent.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/posts/Posts.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/posts/Posts.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/services/serviceComment/CommentService.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/services/serviceComment/CommentService.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/services/servicePost/PostService.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/services/servicePost/PostService.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -74,7 +60,7 @@
       <workItem from="1606935573448" duration="673000" />
       <workItem from="1606995486689" duration="7789000" />
       <workItem from="1607325366693" duration="6396000" />
-      <workItem from="1607412437493" duration="9542000" />
+      <workItem from="1607412437493" duration="10423000" />
     </task>
     <servers />
   </component>
Index: ../../27.10.2020 -js-home_task/js/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n// // 1\r\nlet sey = 'hello';\r\nlet school = 'owu';\r\nlet domain = 'com';\r\nlet region = 'ua';\r\nlet numOne = 1;\r\nlet numTwo = 10;\r\nlet numThree = -999;\r\nlet numFour = 123;\r\nlet numFive = 3.14;\r\nlet numSix = 2.7;\r\nlet numSeven = 16;\r\nlet isYes = true;\r\n\r\n\r\n// // 2\r\nsey = 'world';\r\nschool = 'web';\r\ndomain = 'internet';\r\nregion = 'lviv';\r\nnumOne = 3;\r\nnumTwo = 15;\r\nnumThree = -59;\r\nnumFour = 300;\r\nnumFive = 7.12;\r\nnumSix = 3.6;\r\nnumSeven = 28;\r\nisYes = false;\r\n\r\nconsole.log(sey);\r\nconsole.log(school);\r\nconsole.log(domain);\r\nconsole.log(region);\r\nconsole.log(numOne);\r\nconsole.log(numTwo);\r\nconsole.log(numThree);\r\nconsole.log(numFour);\r\nconsole.log(numFive);\r\nconsole.log(numSix);\r\nconsole.log(isYes);\r\n\r\nalert(sey);\r\nalert(school);\r\nalert(domain);\r\nalert(region);\r\nalert(numOne);\r\nalert(numTwo);\r\nalert(numThree);\r\nalert(numFour);\r\nalert(numFive);\r\nalert(numSix);\r\nalert(isYes);\r\n\r\n\r\n// // 3\r\nconst age = 30;\r\nconst color = 'red';\r\nconst name = 'Alex';\r\n\r\nconsole.log(age, color, name);\r\ndocument.write(age, ' ', color, ' ', name);\r\nalert(age);\r\nalert(color);\r\nalert(name);\r\n\r\n\r\n// // 4\r\nlet firsName = prompt(\"Вкажіть ваше ім'я!\");\r\nlet lastName = prompt(\"Вкажіть ваше прізвище!\");\r\nlet surName = prompt(\"Вкажіть ваше ім'я по батькові!\");\r\n\r\nconsole.log(firsName, lastName, surName);\r\ndocument.write(firsName, ' ', lastName, ' ', surName);\r\nalert(firsName);\r\nalert(lastName);\r\nalert(surName);\r\n\r\n\r\n// 5\r\nlet person = `${firsName} ${lastName} ${surName}`;\r\nconsole.log(person);\r\n\r\n// // 6\r\nlet firsNameMama = prompt(\"Вкажіть ім'я Мами!\");\r\nlet lastNameMama = prompt(\"Вкажіть прізвище Мами!\");\r\nlet surNameMama = prompt(\"Вкажіть ім'я Мами по батькові!\");\r\n\r\nconsole.log(firsNameMama, lastNameMama, surNameMama);\r\ndocument.write(firsNameMama, ' ',lastNameMama, ' ',surNameMama);\r\nalert(firsNameMama);\r\nalert(lastNameMama);\r\nalert(surNameMama);\r\n\r\nlet personMama = `${firsNameMama} ${lastNameMama} ${surNameMama}`;\r\nconsole.log(personMama);\r\n\r\nlet firsNameDad = prompt(\"Вкажіть ім'я Тата!\");\r\nlet lastNameDad = prompt(\"Вкажіть прізвище Тата!\");\r\nlet surNameDad = prompt(\"Вкажіть ім'я Тата по батькові!\");\r\n\r\nconsole.log(firsNameDad, lastNameDad, surNameDad);\r\ndocument.write(firsNameDad, ' ', lastNameDad, ' ', surNameDad);\r\nalert(firsNameDad);\r\nalert(lastNameDad);\r\nalert(surNameDad);\r\n\r\nlet personDad = `${firsNameDad} ${lastNameDad} ${surNameDad}`;\r\nconsole.log(personDad);\r\n\r\n// 7\r\n\r\nlet takeNumONe = +prompt('Вкажіть число!');\r\nlet takeNumTwo = +prompt('Вкажіть число!');\r\nlet takeNumThree = +prompt('Вкажіть число!');\r\n\r\nconsole.log(takeNumONe, takeNumTwo, takeNumThree);\r\n\r\n// 8\r\nlet takeNumFour = parseInt(prompt('Вкажіть число!'));\r\nlet takeNumFive = parseInt(prompt('Вкажіть число!'));\r\nlet takeNumSix = parseInt(prompt('Вкажіть число!'));\r\nlet takeNumSeven = parseInt(prompt('Вкажіть число!'));\r\n\r\nlet result = takeNumFour + takeNumFive + takeNumSix + takeNumSeven;\r\nconsole.log(result);\r\n\r\n// 9\r\nlet numFloatOne = parseFloat(prompt('Вкажіть число через крапку!'));\r\nlet numFloatTwo = parseFloat(prompt('Вкажіть число через крапку!'));\r\nlet numFloatThree= parseFloat(prompt('Вкажіть число через крапку!'));\r\n\r\nlet resultFloat = numFloatOne + numFloatTwo + numFloatThree;\r\nconsole.log (resultFloat);\r\n\r\n// 10\r\nlet numRoundOne = Math.round(prompt('Вкажіть число через крапку!'));\r\nlet numRoundTwo = Math.round(prompt('Вкажіть число через крапку!'));\r\nlet numRoundThree= Math.round(prompt('Вкажіть число через крапку!'));\r\n\r\nlet resultRound = numRoundOne + numRoundTwo + numRoundThree;\r\nconsole.log (resultRound);\r\n\r\n// 11\r\nlet numPowdOne = prompt('Вкажіть число!');\r\nlet numPowdTwo = prompt('Вкажіть число!');\r\n\r\nconsole.log (Math.pow(numPowdOne, numPowdTwo));\r\n\r\n// 12\r\nlet a = 100; \r\nlet b = '100'; \r\nlet c = true; \r\nlet d = undefined;\r\n\r\nconsole.log(typeof a);\r\nconsole.log(typeof b);\r\nconsole.log(typeof c);\r\nconsole.log(typeof d);\r\n\r\n// 13\r\n5 < 6 -> true\r\n5 > 6 -> false\r\n5 >= 6 -> false\r\n5 === 6 -> false\r\n10 == 10 -> true\r\n10 >= 10 -> true\r\n10 < 10 -> false\r\n10 > 10 -> false\r\n10 != 10 -> false\r\n123 === '123' -> false\r\n123 == '123' -> true\r\n\r\n// 14\r\n\r\nconsole.log(132 > 100 && 45 < 12 );--false\r\nconsole.log(34 > 33 && 23 < 90 );--true\r\nconsole.log(99 > 100 && 45 > 12 );--false\r\nconsole.log(132 > 100 || 45 < 12 );--true\r\nconsole.log(111 > 11 || 45 < 111 );--true\r\nconsole.log((111 > 11 || 45 < 111) && (132 > 100 || 45 < 12) );-true\r\nconsole.log((111 > 11 || 45 < 56) || (132 > 100 || 45 < 12) );--true\r\nconsole.log((132 > 100 && 45 < 12 ) && (132 > 100 || 45 < 12 ) );--false\r\nconsole.log((111 > 11 || 45 < 111) || (99 > 100 && 45 > 12 ));--true\r\nconsole.log(!!'-1');--true\r\nconsole.log(!!-1);--true\r\nconsole.log(!!'0');-true\r\nconsole.log(!!'null');--true\r\nconsole.log(!!'undefined');--true\r\nconsole.log(!!(3/'owu'));--false\r\nconsole.log((111 > 11 || 45 < 111) ||  !!'0');--tue\r\nconsole.log((!!111 == !!11 || 45 < 111) && (99 > 100 && 45 > 12 ));\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../27.10.2020 -js-home_task/js/main.js b/../../27.10.2020 -js-home_task/js/main.js
--- a/../../27.10.2020 -js-home_task/js/main.js	
+++ b/../../27.10.2020 -js-home_task/js/main.js	
@@ -189,4 +189,4 @@
 console.log(!!'undefined');--true
 console.log(!!(3/'owu'));--false
 console.log((111 > 11 || 45 < 111) ||  !!'0');--tue
-console.log((!!111 == !!11 || 45 < 111) && (99 > 100 && 45 > 12 ));
+console.log((!!111 == !!11 || 45 < 111) && (99 > 100 && 45 > 12 ));--false
Index: ../../.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n# Created by https://www.toptal.com/developers/gitignore/api/windows,vscode\r\n# Edit at https://www.toptal.com/developers/gitignore?templates=windows,vscode\r\n\r\n### vscode ###\r\n.vscode/*\r\n!.vscode/settings.json\r\n!.vscode/tasks.json\r\n!.vscode/launch.json\r\n!.vscode/extensions.json\r\n*.code-workspace\r\n\r\n### Windows ###\r\n# Windows thumbnail cache files\r\nThumbs.db\r\nThumbs.db:encryptable\r\nehthumbs.db\r\nehthumbs_vista.db\r\n\r\n# Dump file\r\n*.stackdump\r\n\r\n# Folder config file\r\n[Dd]esktop.ini\r\n\r\n# Recycle Bin used on file shares\r\n$RECYCLE.BIN/\r\n\r\n# Windows Installer files\r\n*.cab\r\n*.msi\r\n*.msix\r\n*.msm\r\n*.msp\r\n\r\n# Windows shortcuts\r\n*.lnk\r\n\r\n# End of https://www.toptal.com/developers/gitignore/api/windows,vscode
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../.gitignore b/../../.gitignore
--- a/../../.gitignore	
+++ b/../../.gitignore	
@@ -1,4 +1,4 @@
-
+debug.log
 # Created by https://www.toptal.com/developers/gitignore/api/windows,vscode
 # Edit at https://www.toptal.com/developers/gitignore?templates=windows,vscode
 
Index: ../../02.11.2020-JS-DOM-home_task/task2/js/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// - создать 5 объектов. В каждом объекте не менее 3х полей. Все объекты разные по набору полей. (Т.е поле name  должно присутствовать только 1 раз в одном объекте )\r\n// - При помощи Object.keys вывести все ключи всех объектов из задания 1 и 2\r\n\r\nlet dog = {\r\n    name: 'tuzik', \r\n    color: 'black', \r\n    breed: 'shepherd'\r\n};\r\n\r\nfor (let key in dog) {\r\n    console.log('key', key);\r\n}\r\nconsole.log(Object.keys(dog));\r\nconsole.log('________________');\r\n\r\nlet person = {\r\n    age: 25, \r\n    nationality: 'ukrainian', \r\n    height: 180\r\n};\r\n\r\nfor (let key in person) {\r\n    console.log('key', key);\r\n}\r\nconsole.log(Object.keys(person));\r\nconsole.log('________________');\r\n\r\nlet car = {\r\n    fuel: 'diesel',\r\n    power: 81,\r\n    model: 'skoda'\r\n};\r\n\r\nfor (let key in car) {\r\n    console.log('key', key);\r\n}\r\nconsole.log(Object.keys(car));\r\nconsole.log('________________');\r\n\r\nlet apartment = {\r\n    size: 68, \r\n    rooms: 2, \r\n    balcony: true,\r\n};\r\n\r\nfor (let key in apartment) {\r\n    console.log(key);\r\n}\r\nconsole.log(Object.keys(apartment));\r\nconsole.log('________________');\r\n\r\nlet book = {\r\n    author: 'Nick Morgan', \r\n    pages: 336, \r\n    price: 280\r\n};\r\n\r\nfor (let key in book) {\r\n    console.log(key);\r\n}\r\nconsole.log(Object.keys(book));\r\nconsole.log('________________');\r\n\r\n\r\n\r\n// - создать 5 объектов с полностью разным набором полей. В каждом объекте должен присутсвовать массив и внутренний объект. Опишите что угодно, машину, картину, болт... Пример : let man = { name: 'kokos', skills : ['java','js'] , wife: { name: 'cherry' } };\r\n\r\nlet man = {\r\n    name: 'Alex',\r\n    age: 33,\r\n    skills: ['js', 'html', 'css'],\r\n    wife: {\r\n        name: 'Olena',\r\n        age: 30\r\n    }\r\n};\r\n\r\nfor (let key in man) {\r\n    console.log(key);\r\n}\r\nconsole.log(Object.keys(man));\r\nconsole.log('________________');\r\n\r\n\r\nlet zoo = {\r\n    location: 'Lviv',\r\n    animals: ['Lion', 'Monkey', 'Birds'],\r\n    lion : {\r\n        length: 1.2,\r\n        weight: 180,\r\n        speed: 80\r\n    }\r\n};\r\n\r\nfor (let key in zoo) {\r\n    console.log(key);\r\n}\r\nconsole.log(Object.keys(zoo));\r\nconsole.log('________________');\r\n\r\n\r\nlet cars = {\r\n    production : 'opel',\r\n    model: ['Astra', 'Omega', 'Vectra'],\r\n    vectra: {\r\n        color: 'gray',\r\n        power: 92,\r\n        weight: 1200\r\n    },\r\n    contry: 'Germany'\r\n}\r\n\r\n// - При помощи for in вывести все ключи всех объектов из задания 1 и 2\r\n\r\nfor (let key in cars) {\r\n    console.log(key);\r\n}\r\nconsole.log(Object.keys(cars));\r\nconsole.log('________________');\r\n\r\n// - Создать массив из 10 объектов cars и заполнить его машинами с полями модель, год выпуска, мощность, цвет. (Значаения полей могу быть выдуманными)\r\n\r\nlet avto = [\r\n    {production: 'toyota', power: 67, color: 'black', year: 2010},\r\n    {production: 'mazda', power: 86, color: 'gray', year: 2015},\r\n    {production: 'opel', power: 90, color: 'red', year: 2013},\r\n    {production: 'bmw', power: 70, color: 'black', year: 2009},\r\n    {production: 'citroen', power: 83, color: 'gray', year: 2017},\r\n    {production: 'renault', power: 97, color: 'red', year: 2019},\r\n    {production: 'honda', power: 80, color: 'black', year: 2000},\r\n    {production: 'kia', power: 65, color:'gray', year: 2016},\r\n    {production: 'audi', power: 91, color: 'red', year: 2004},\r\n    {production: 'mercedes', power: 100, color: 'black', year: 2017}\r\n\r\n];\r\n// - проитерировать каждый массив из задания 5,6,7 при помощи while.\r\nfor (let i = 0; i < avto.length; i++) {\r\n    console.log(avto[i]);\r\n}\r\nconsole.log('_________________');\r\n\r\nlet i = 0;\r\nwhile (i < avto.length){\r\n    console.log(avto[i]);\r\n    i++;\r\n}\r\nconsole.log('_________________');\r\n\r\nfor (let key of avto) {\r\n    console.log(key);\r\n}\r\nconsole.log(\"__________________________\");\r\n// - Создать массив объектов cities и заполнить его объектами с полями название, популяция, страна, регион. (Значаения полей могу быть выдуманными)\r\n\r\nlet cities = [\r\n    {name: 'amsterdam', region: 'europe', contry: 'nederlands', population: 17000000},\r\n    {name: 'london', region: 'europe', contry: 'great britain', population: 56000000},\r\n    {name: 'lviv', region: 'europe', contry: 'ukraine', population: 34000000},\r\n    {name: 'krakow', region: 'europe', contry: 'poland', population: 28000000},\r\n    {name: 'berlin', region: 'europe', contry: 'germany', population: 36000000},\r\n    {name: 'paris', region: 'europe', contry: 'france', population: 72000000},\r\n    {name: 'madrid', region: 'europe', contry: 'spain', population: 64000000},\r\n    {name: 'roma', region: 'europe', contry: 'itali', population: 51000000},\r\n    {name: 'praha', region: 'europe', contry: 'czech', population: 28000000},\r\n    {name: 'riga', region: 'europe', contry: 'latvia', population: 5000000},\r\n];\r\n// - проитерировать каждый массив из задания 5,6,7 при помощи while.\r\nfor (let i = 0; i < cities.length; i++) {\r\n    console.log(cities[i]);\r\n}\r\nconsole.log(\"_____________________________\");\r\n\r\nlet b = 0;\r\nwhile (b < cities.length){\r\n    console.log(cities[b]);\r\n    b++;\r\n}\r\nconsole.log('_________________');\r\n\r\nfor (let key of cities) {\r\n    console.log(key);\r\n}\r\nconsole.log(\"__________________________\");\r\n// - Создать массив объектов cars и заполнить его машинами с полями модель, год выпуска, мощность, цвет, водитель. Водитель является отдельным объектом с полями имя, возраст, пол, стаж.\r\n\r\n\r\nlet avtoDriver = [\r\n    {production: 'toyota', power: 67, color: 'black', year: 2010, driver: {name: 'max', age: 34, sex: 'man', experience: 10}},\r\n    {production: 'mazda', power: 86, color: 'gray', year: 2015, driver: {name: 'bob', age: 54, sex: 'man', experience: 7}},\r\n    {production: 'opel', power: 90, color: 'red', year: 2013, driver: {name: 'sem', age: 25, sex: 'man', experience: 30}},\r\n    {production: 'bmw', power: 70, color: 'black', year: 2009, driver: {name: 'nik', age: 47, sex: 'man', experience: 22}},\r\n    {production: 'citroen', power: 83, color: 'gray', year: 2017, driver: {name: 'alex', age: 37, sex: 'man', experience: 20}},\r\n    {production: 'renault', power: 97, color: 'red', year: 2019, driver: { name: 'den', age: 50, sex: 'man', experience: 12}},\r\n    {production: 'honda', power: 80, color: 'black', year: 2000, driver: {name: 'vasya', age: 51, sex: 'man', experience: 15}},\r\n    {production: 'kia', power: 65, color:'gray', year: 2016, driver: {name: 'kolya', age: 29, sex: 'man', experience: 24}},\r\n    {production: 'audi', power: 91, color: 'red', year: 2004, driver: {name: 'viktor', age:39, sex: 'man', experience: 5}},\r\n    {production: 'mercedes', power: 100, color: 'black', year: 2017, driver: {name: 'serg', age: 43, sex: 'man', experience: 9}}\r\n];\r\n// - проитерировать каждый массив из задания 5,6,7 при помощи while.\r\nfor (let i = 0; i < avtoDriver.length; i++) {\r\n    console.log(avtoDriver[i]);\r\n}\r\nconsole.log(\"_________________________\");\r\n\r\nlet c = 0;\r\nwhile (c < avtoDriver.length){\r\n    console.log(avtoDriver[c]);\r\n    c++;\r\n}\r\nconsole.log('_________________');\r\n\r\nfor (let key of avtoDriver) {\r\n    console.log(key);\r\n}\r\nconsole.log(\"__________________________\");\r\n\r\n\r\n// взять объекты из задания 1 и превратить каждый в json.\r\n\r\nlet newDog = JSON.stringify(dog);\r\nconsole.log(newDog);\r\nlet cloneDog = JSON.parse(newDog);\r\nconsole.log(cloneDog);\r\n\r\nlet newPerson = JSON.stringify(person);\r\nlet clonePerson = JSON.parse(newPerson);\r\nconsole.log(clonePerson);\r\n\r\nlet newCar = JSON.stringify(car);\r\nlet cloneCar = JSON.parse(newCar);\r\nconsole.log(cloneCar);\r\n\r\nlet newApartment = JSON.stringify(apartment);\r\nlet cloneApartment = JSON.parse(newApartment);\r\nconsole.log(cloneApartment);\r\n\r\nlet newBook = JSON.stringify(book);\r\nlet cloneBook = JSON.parse(newBook);\r\nconsole.log(cloneBook);\r\n\r\n\r\n// - взять массив из задания 5,в цикле перебрать его объекты превратив их в json .\r\n\r\nfor (let key of avto) {\r\n    let avtoJson = JSON.stringify(key);\r\n    console.log(avtoJson);\r\n}\r\nconsole.log(\"__________________________\");\r\n\r\n// - взять массив из задания 6,в цикле перебрать его объекты превратив их в json .\r\n\r\nfor (let key of cities) {\r\n    let citiesJson = JSON.stringify(key);\r\n    console.log(citiesJson);\r\n}\r\nconsole.log(\"__________________________\");\r\n\r\n// - взять массив из задания 7,в цикле перебрать его объекты превратив их в json и сразу скоприовать в новый массив.\r\nlet avtoDriverArr = [];\r\nfor (let key of avtoDriver) {\r\n    let avtoDriveJson = JSON.stringify(key);\r\n    avtoDriverArr.unshift(avtoDriveJson);\r\n   \r\n}\r\nconsole.log(avtoDriverArr);\r\n\r\nconsole.log(\"__________________________\");\r\n\r\n// - Создать массив пользователей. \r\n// У каждого пользователя обязательно должено быть поле skills которое является массивом. \r\n// Проитерировать массив пользователей и в каждом пользователе проитерировать его массив skills\r\n\r\nlet man1 = [\r\n    {name: 'Alex', age: 33, skills: ['js', 'html', 'css']},\r\n    {name: 'Nik', age: 33, skills: ['java', 'html', 'css']},\r\n    {name: 'Olya', age: 33, skills: ['php', 'css']},\r\n    {name: 'Oleg', age: 33, skills: ['mysql', 'html']},\r\n];\r\n\r\nfor (let user of man1) {\r\n    console.log('Name', user.name);\r\n    \r\n    for (let  skill of user.skills) {\r\n    console.log('skill', skill);\r\n    }\r\n}\r\n\r\n// - Создать массив пользователей. \r\n// У каждого пользователя обязательно должено быть поле skills которое является массивом. \r\n// Проитерировать массив пользователей и в каждом пользователе проитерировать его массив skills. \r\n// Скопировать все skills всех пользователей в отедльный массив\r\n\r\nlet man2 = [\r\n    {name: 'Alex', age: 33, skills: ['js', 'html', 'css']},\r\n    {name: 'Nik', age: 33, skills: ['java', 'html', 'css']},\r\n    {name: 'Olya', age: 33, skills: ['php', 'css']},\r\n    {name: 'Oleg', age: 33, skills: ['mysql', 'html']},\r\n];\r\nlet newMan = [];\r\n\r\nfor (let user of man1) {\r\n    console.log('Name', user.name);\r\n    \r\n    for (let  skill of user.skills) {\r\n    console.log('skill', skill);\r\n    newMan.unshift(skill);\r\n    }\r\n}\r\nconsole.log(newMan);\r\n\r\n\r\n// - За допомогою 2х циклів циклів проітеррувати  даний масив і масив кожного об'єкта.\r\n\r\n let users = [\r\n    {name: 'vasya', age: 31, status: false, skills: ['java', 'js']},\r\n    {name: 'petya', age: 30, status: true, skills: ['java', 'js', 'html']}, \r\n    {name: 'kolya', age: 29, status: true, skills: ['mysql', ',mongo']}, \r\n    {name: 'olya', age: 28, status: false, skills: ['java', 'js']}, \r\n    {name: 'max', age: 30, status: true, skills: ['mysql', ',mongo']}\r\n];\r\n\r\nfor (let user of users) {\r\n    console.log(user);\r\n    for (let skill of user.skills) {\r\n        console.log(skill);\r\n    }\r\n}\r\n\r\n\r\n\r\n// - З масиву users за допомогою циклу витягнути адреси користувачів і записати (скопіювати) їх в інший порожній масив.\r\n// - За допомоги циклу проітерувати  масив users, записати кожного юзера в сівй блок за допомоги document.createElement. Всі данні в одному блоці.\r\n// - За допомоги циклу проітерувати  масив users, записати кожного юзера в сівй блок за допомоги document.createElement, розділивши всі властивості по своїм блокам (div>div*4)\r\n// - За допомоги циклу проітерувати  масив users, записати кожного юзера в сівй блок за допомоги document.createElement, розділивши всі властивості по своїм блокам , блок з адресою зробити окремим блоком, з блоками для кожної властивості\r\n\r\n\r\nlet usersAdr = [{\r\n    name: 'vasya',\r\n    age: 31,\r\n    status: false,\r\n    address: {city: 'Lviv', country: 'Ukraine', street: 'Shevchenko', houseNumber: 1}\r\n}, {\r\n    name: 'petya',\r\n    age: 30,\r\n    status: true,\r\n    address: {city: 'New York', country: 'USA', street: 'East str', houseNumber: 21}\r\n}, {\r\n    name: 'kolya',\r\n    age: 29,\r\n    status: true,\r\n    address: {city: 'Budapest', country: 'Hungary', street: 'Kuraku', houseNumber: 78}\r\n}, {\r\n    name: 'olya',\r\n    age: 28,\r\n    status: false,\r\n    address: {city: 'Prague', country: 'Czech', street: 'Paster', houseNumber: 56}\r\n}, {\r\n    name: 'max',\r\n    age: 30,\r\n    status: true,\r\n    address: {city: 'Istanbul', country: 'Turkey', street: 'Mikar', houseNumber: 39}\r\n}, {\r\n    name: 'anya',\r\n    age: 31,\r\n    status: false,\r\n    address: {city: 'Rio', country: 'Brasil', street: 'Ronaldi', houseNumber: 5}\r\n}, {\r\n    name: 'oleg',\r\n    age: 28,\r\n    status: false,\r\n    address: {city: 'Montreal', country: 'Canada', street: 'Acusto', houseNumber: 90}\r\n}, {\r\n    name: 'andrey',\r\n    age: 29,\r\n    status: true,\r\n    address: {city: 'Quebeck', country: 'Canada', street: 'Binaro', houseNumber: 33}\r\n}, {\r\n    name: 'masha',\r\n    age: 30,\r\n    status: true,\r\n    address: {city: 'Moscow', country: 'Russia', street: 'Gogolia', houseNumber: 1}\r\n}, {\r\n    name: 'olya',\r\n    age: 31,\r\n    status: false,\r\n    address: {city: 'Portland', country: 'USA', street: 'Forest str', houseNumber: 4}\r\n}, {\r\n    name: 'max',\r\n    age: 31,\r\n    status: true,\r\n    address: {city: 'Cairo', country: 'Egypt', street: 'Seashore', houseNumber: 45}\r\n}];\r\n\r\n\r\nlet adrArr = [];\r\nfor( let key of usersAdr) {\r\n    adrArr.unshift(key.address);\r\n}\r\nconsole.log(adrArr);\r\n\r\n\r\n// - За допомоги циклу проітерувати  масив users, записати кожного юзера в сівй блок за допомоги document.createElement. Всі данні в одному блоці.\r\nlet block = document.createElement('div');\r\nblock.style.width = '1000px';\r\nblock.style.height = 'auto';\r\nblock.style.marginBottom = '10px';\r\nblock.style.background = 'yellow';\r\ndocument.body.appendChild(block);\r\n\r\nfor( let key of usersAdr) {\r\n   block.innerText += `${key.name} ${key.age} ${key.status} ${key.address.city} ${key.address.country} ${key.address.street} ${key.address.houseNumber} , `;\r\n}\r\n\r\n// - За допомоги циклу проітерувати  масив users, записати кожного юзера в сівй блок за допомоги document.createElement, розділивши всі властивості по своїм блокам (div>div*4)\r\n\r\nfor( let key of usersAdr) {\r\n    let block = document.createElement('div');\r\n    block.style.width = '1000px';\r\n    block.style.height = 'auto';\r\n    block.style.marginBottom = '10px';\r\n    block.style.background = 'yellow';\r\n    document.body.appendChild(block);\r\n    \r\n    block.innerText = `${key.name} ${key.age} ${key.status} ${key.address.city} ${key.address.country} ${key.address.street} ${key.address.houseNumber} , `;\r\n }\r\n\r\n// - За допомоги циклу проітерувати  масив users, \r\n// записати кожного юзера в сівй блок за допомоги \r\n// document.createElement, розділивши всі властивості по своїм блокам , \r\n// блок з адресою зробити окремим блоком, з блоками для кожної властивості\r\n\r\n\r\nfor( let key of usersAdr) {\r\n    let block = document.createElement('div');\r\n    let h3 = document.createElement('h3');\r\n    let p1 = document.createElement('p');\r\n    let p2 = document.createElement('p');\r\n    let addressStr = '';\r\n    for (let address1 in key.address) {\r\n        addressStr = addressStr + ' ' + key.address[address1];\r\n    }\r\n    h3.innerText = key.name;\r\n    p1.innerText = key.age;\r\n    p2.innerText = addressStr;\r\n\r\n    block.appendChild(h3);\r\n    block.appendChild(p1);\r\n    block.appendChild(p2);\r\n    document.body.appendChild(block);\r\n\r\n }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../02.11.2020-JS-DOM-home_task/task2/js/main.js b/../../02.11.2020-JS-DOM-home_task/task2/js/main.js
--- a/../../02.11.2020-JS-DOM-home_task/task2/js/main.js	
+++ b/../../02.11.2020-JS-DOM-home_task/task2/js/main.js	
@@ -448,4 +448,6 @@
     block.appendChild(p2);
     document.body.appendChild(block);
 
- }
\ No newline at end of file
+ }
+
+//  - Дано 2 масиви з рівною кількістю об'єктів.
\ No newline at end of file
Index: ../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n// ==============================================\r\n// -  Створити функцію конструктор для об'єкту який описує теги\r\n// Властивості\r\n//  -назва тегу\r\n//  - опис його дій\r\n//  - масив з атрибутами (2-3 атрибути максимум)\r\n//  Кожен атрибут описати як окремий який буде містити\r\n//  -назву атрибуту\r\n//  -опис дії атрибуту\r\n//  інформацію брати з htmlbook.ru\r\n\r\n//  Таким чином описати теги\r\n//  -a\r\n//  -div\r\n//  -h1\r\n//  -span\r\n//  -input\r\n//  -form\r\n//  -option\r\n//  -select\r\n//  Приклад результату\r\n//    {\r\n//         titleOfTag: 'area',\r\n//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,\r\n//         attrs: [\r\n//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},\r\n//         {/*some props and values*/},\r\n//         {/*...*/},\r\n//         {/*...*/},\r\n//         ]\r\n\r\n//    }\r\n\r\n// function Html(name,action,attribute) {\r\n//     this.name = name;\r\n//     this.action = action;\r\n//     this.attribute = attribute;\r\n// }\r\n\r\n// let link = new Html ('<a>','Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок.',[{href: 'Задает адрес документа, на который следует перейти.'},{target: 'Имя окна или фрейма, куда браузер будет загружать документ.'},{name: 'Устанавливает имя якоря внутри документа.'}]);\r\n// let block = new Html('<div>','Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого.', [{align: 'Задает выравнивание содержимого тега'}, {title: 'Добавляет всплывающую подсказку к содержимому.'}]);\r\n// let heading = new Html('<h1>', 'тег <h1> представляет собой наиболее важный заголовок первого уровня', [{align: 'Задает выравнивание содержимого тега'}, {class: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'}]);\r\n// let span = new Html('<span>', 'Тег <span> предназначен для определения строчных элементов документа', [{class: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'}, {onclick: 'Щелчок левой кнопкой мыши на элементе.'}, {style: 'Применяется для определения стиля элемента с помощью правил CSS.'}]);\r\n// let input = new Html('<input>', 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем', [{name: 'Имя поля, предназначено для того, чтобы обработчик формы мог его идентифицировать.'}, {value: 'Значение элемента.'}]);\r\n// let form = new Html('<form>', 'Тег <form> устанавливает форму на веб-странице.', [{action: 'Адрес программы или документа, который обрабатывает данные формы.'}, {method: 'Метод протокола HTTP.'}]);\r\n// let option = new Html('<option>', 'Тег <option> определяет отдельные пункты списка', [{disabled: 'Заблокировать для доступа элемент списка.'}, {label:'Указание метки пункта списка.'}]);\r\n// let select = new Html('<select>', 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее.', [{size: 'Количество отображаемых строк списка.'}, {form: 'Связывает список с формой.'}]);\r\n\r\n// ==============================================\r\n// -  Створити класс  для об'єкту який описує теги\r\n// Властивості\r\n//  -назва тегу\r\n//  - опис його дій\r\n//  - масив з атрибутами (2-3 атрибути максимум)\r\n//  Кожен атрибут описати як окремий який буде містити\r\n//  -назву атрибуту\r\n//  -опис дії атрибуту\r\n//  інформацію брати з htmlbook.ru\r\n\r\n//  Таким чином описати теги\r\n//  -a\r\n//  -div\r\n//  -h1\r\n//  -span\r\n//  -input\r\n//  -form\r\n//  -option\r\n//  -select\r\n//  Приклад результату\r\n//    {\r\n//         titleOfTag: 'area',\r\n//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,\r\n//         attrs: [\r\n//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},\r\n//         {/*some props and values*/},\r\n//         {/*...*/},\r\n//         {/*...*/},\r\n//         ]\r\n\r\n//    }\r\n// ==============================================\r\n\r\n\r\n// class HtmlTag {\r\n//     constructor(name,action,attribute) {\r\n//         this.name = name;\r\n//         this.action = action;\r\n//         this.attribute = attribute;\r\n//     }\r\n// }\r\n\r\n// let linkTag = new HtmlTag('<a>','Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок.',[{href: 'Задает адрес документа, на который следует перейти.'},{target: 'Имя окна или фрейма, куда браузер будет загружать документ.'},{name: 'Устанавливает имя якоря внутри документа.'}]);\r\n// let blockTag = new HtmlTag('<div>','Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого.', [{align: 'Задает выравнивание содержимого тега'}, {title: 'Добавляет всплывающую подсказку к содержимому.'}]);\r\n// let headingTag = new HtmlTag('<h1>', 'тег <h1> представляет собой наиболее важный заголовок первого уровня', [{align: 'Задает выравнивание содержимого тега'}, {class: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'}]);\r\n// let spanTag = new HtmlTag('<span>', 'Тег <span> предназначен для определения строчных элементов документа', [{class: 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.'}, {onclick: 'Щелчок левой кнопкой мыши на элементе.'}, {style: 'Применяется для определения стиля элемента с помощью правил CSS.'}]);\r\n// let inputTag = new HtmlTag('<input>', 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса и обеспечить взаимодействие с пользователем', [{name: 'Имя поля, предназначено для того, чтобы обработчик формы мог его идентифицировать.'}, {value: 'Значение элемента.'}]);\r\n// let formTag = new HtmlTag('<form>', 'Тег <form> устанавливает форму на веб-странице.', [{action: 'Адрес программы или документа, который обрабатывает данные формы.'}, {method: 'Метод протокола HTTP.'}]);\r\n// let optionTag = new HtmlTag('<option>', 'Тег <option> определяет отдельные пункты списка', [{disabled: 'Заблокировать для доступа элемент списка.'}, {label:'Указание метки пункта списка.'}]);\r\n// let selectTag = new HtmlTag('<select>', 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или множественным выбором, как показано далее.', [{size: 'Количество отображаемых строк списка.'}, {form: 'Связывает список с формой.'}]);\r\n\r\n// ==============================================\r\n// - Створити об'єкт car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:\r\n// -- drive () - яка виводить в консоль \"їдемо зі швидкістю {максимальна швидкість} на годину\"\r\n// -- info () - яка виводить всю інформацію про автомобіль\r\n// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed\r\n// -- changeYear (newValue) - змінює рік випуску на значення newValue\r\n// -- addDriver (driver) - приймає об'єкт який \"водій\" з довільним набором полів, і доавляет його в поточний об'єкт car\r\n// =============================================\r\n\r\n// let car = {\r\n//     model: 'Octavia',\r\n//     producer: 'Skoda',\r\n//     year: 2015,\r\n//     maxSpeed: 220,\r\n//     motor: 1.8,\r\n//     driver: {},\r\n//     drive: function() {\r\n//         console.log(`їдемо зі швидкістю ${this.maxSpeed} на годину`);\r\n//     },\r\n//     info: function() {\r\n//         console.log(`\r\n//         model: ${this.model},\r\n//         producer: ${this.producer},\r\n//         year: ${this.year},\r\n//         maxSpeed: ${this.maxSpeed},\r\n//         motor: ${this.motor},\r\n//         `);\r\n//     },\r\n//     increaseMaxSpeed: function(newSpeed) {\r\n//         this.maxSpeed += newSpeed;\r\n//     },\r\n//     changeYear: function (newValue) {\r\n//         this.year = newValue;\r\n//     },\r\n//     addDriver: function (driver) {\r\n//         this.driver = driver;\r\n//     }\r\n// }\r\n\r\n\r\n// ==============================================\r\n// - Створити функцію конструктор яка дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:\r\n// -- drive () - яка виводить в консоль \"їдемо зі швидкістю {максимальна швидкість} на годину\"\r\n// -- info () - яка виводить всю інформацію про автомобіль\r\n// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed\r\n// -- changeYear (newValue) - змінює рік випуску на значення newValue\r\n// -- addDriver (driver) - приймає об'єкт який \"водій\" з довільним набором полів, і доавляет його в поточний об'єкт car\r\n// ==============================================\r\n// let driver = {one: 1, two: 2};\r\n// function Car(model,producer,year, maxSpeed,motor,driver) {\r\n//     this.model = model;\r\n//     this.producer = producer;\r\n//     this.year = year;\r\n//     this.maxSpeed = maxSpeed;\r\n//     this.motor = motor;\r\n//     this.driver = driver;\r\n//     this.info = function() {\r\n//         console.log(`\r\n//         model: ${this.model},\r\n//         producer: ${this.producer},\r\n//         year: ${this.year},\r\n//         maxSpeed: ${this.maxSpeed},\r\n//         motor: ${this.motor},\r\n//         `);\r\n//     };\r\n//     this.increaseMaxSpeed = function(newSpeed) {\r\n//         this.maxSpeed += newSpeed;\r\n//     };\r\n//     this.changeYear = function(newValue) {\r\n//         this.year = newValue;\r\n//     };\r\n//     this.addDriver = function(driver) {\r\n//         this.driver = driver;\r\n//     };\r\n// }\r\n\r\n// let skoda = new Car('Octavia','Skoda', 2015, 220, 1.8);\r\n// // console.log(skoda.addDriver(driver));\r\n// console.log(skoda.driver);\r\n// console.log(skoda.producer);\r\n\r\n// ==============================================\r\n// - Створити клас який дозволяє створювати об'єкти car, з властивостями модель, виробник, рік випуску, максимальна швидкість, об'єм двигуна. додати в об'єкт функції:\r\n// -- drive () - яка виводить в консоль \"їдемо зі швидкістю {максимальна швидкість} на годину\"\r\n// -- info () - яка виводить всю інформацію про автомобіль\r\n// -- increaseMaxSpeed (newSpeed) - яка підвищує значення максимальної швидкості на значення newSpeed\r\n// -- changeYear (newValue) - змінює рік випуску на значення newValue\r\n// -- addDriver (driver) - приймає об'єкт який \"водій\" з довільним набором полів, і доавляет його в поточний об'єкт car\r\n// ==============================================\r\n\r\n\r\n// let driver = {one: 1, two: 2};\r\n// class Car {\r\n//     constructor(model,producer,year, maxSpeed,motor,driver) {\r\n//         this.model = model;\r\n//         this.producer = producer;\r\n//         this.year = year;\r\n//         this.maxSpeed = maxSpeed;\r\n//         this.motor = motor;\r\n//         this.driver = driver;\r\n//         this.info = function() {\r\n//             console.log(`\r\n//             model: ${this.model},\r\n//             producer: ${this.producer},\r\n//             year: ${this.year},\r\n//             maxSpeed: ${this.maxSpeed},\r\n//             motor: ${this.motor},\r\n//             `);\r\n//         };\r\n//         this.increaseMaxSpeed = function(newSpeed) {\r\n//             this.maxSpeed += newSpeed;\r\n//         };\r\n//         this.changeYear = function(newValue) {\r\n//             this.year = newValue;\r\n//         };\r\n//         this.addDriver = function(driver) {\r\n//             this.driver = driver;\r\n//         };\r\n//     }\r\n// }\r\n\r\n// let skodaOktavia = new Car('Octavia','Skoda', 2015, 220, 1.8);\r\n\r\n// console.log(skodaOktavia);\r\n// console.log(skodaOktavia.addDriver(driver));\r\n// console.log(skodaOktavia.driver);\r\n// console.log(skodaOktavia.producer);\r\n\r\n// ==============================================\r\n// -створити класс попелюшка з полями ім'я, вік, розмір ноги\r\n// --Створити 10 попелюшок , покласти їх в масив\r\n// --Сторити об'єкт класу \"принц\" за допомоги класу який має поля ім'я, вік, туфелька яку він знайшов.\r\n// -- за допоиоги циклу знайти яка попелюшка повинна бути з принцом\r\n// ==============================================\r\n\r\n// class Cinderella {\r\n//     constructor  (name,age,footSize) {\r\n//         this.name = name;\r\n//         this.age = age;\r\n//         this.footSize = footSize;\r\n//     }\r\n// }\r\n\r\n// let cinder1 = new Cinderella('Masha', 22, 36);\r\n// let cinder2 = new Cinderella('Tanja', 35, 38);\r\n// let cinder3 = new Cinderella('Olena', 20, 34);\r\n// let cinder4 = new Cinderella('Olga', 45, 40);\r\n// let cinder5 = new Cinderella('Anna', 27, 37);\r\n// let cinder6 = new Cinderella('Diana', 34, 38);\r\n// let cinder7 = new Cinderella('Vita', 28, 39);\r\n// let cinder8 = new Cinderella('Nika', 20, 32);\r\n// let cinder9 = new Cinderella('Sveta', 18, 33);\r\n// let cinder10 = new Cinderella('Lysja', 19, 35);\r\n\r\n// let cinderella = [cinder1, cinder2, cinder3, cinder4, cinder5, cinder6, cinder7, cinder8, cinder9, cinder10];\r\n\r\n// class Princ {\r\n//     constructor(name,age,searchShoes) {\r\n//         this.name = name;\r\n//         this.age = age;\r\n//         this.searchShoes = searchShoes || +prompt('Введи від 32 - 40');\r\n//         this.myCinderella = function(searchShoes) {\r\n//             let shoes = 0;\r\n//             for (let key of searchShoes) {\r\n//                 if(key.footSize === this.searchShoes) {\r\n//                     shoes = key;\r\n//                 }\r\n//             }\r\n//             document.write('Імя моєї попилюшки'+ ' ' + shoes.name);\r\n//         }\r\n//     }\r\n// }\r\n\r\n// let vasja = new Princ('Vasya', 50, );\r\n// vasja.myCinderella(cinderella);\r\n\r\n\r\n// ==============================================\r\n// -створити функцію конструктор попелюшка з полями ім'я, вік, розмір ноги\r\n// --Створити 10 попелюшок , покласти їх в масив\r\n// --Сторити об'єкт типу \"принц\" за допомоги функції конструктора з полями ім'я, вік, туфелька яку він знайшов, та функцію \"пошук попелюшки\"\r\n// -- функція повинна приймати масив попелюшок, та шукає ту котра йому підходить\r\n// ==============================================\r\n\r\nfunction Cinderella(name, age, footSize) {\r\n    this.name = name;\r\n    this.age = age;\r\n    this.footSize = footSize;\r\n}\r\n\r\nlet cinder1 = new Cinderella('Masha', 22, 36);\r\nlet cinder2 = new Cinderella('Tanja', 35, 38);\r\nlet cinder3 = new Cinderella('Olena', 20, 34);\r\nlet cinder4 = new Cinderella('Olga', 45, 40);\r\nlet cinder5 = new Cinderella('Anna', 27, 37);\r\nlet cinder6 = new Cinderella('Diana', 34, 38);\r\nlet cinder7 = new Cinderella('Vita', 28, 39);\r\nlet cinder8 = new Cinderella('Nika', 20, 32);\r\nlet cinder9 = new Cinderella('Sveta', 18, 33);\r\nlet cinder10 = new Cinderella('Lysja', 19, 35);\r\n\r\nlet cinderella = [cinder1, cinder2, cinder3, cinder4, cinder5, cinder6, cinder7, cinder8, cinder9, cinder10];\r\n\r\nfunction Princ (name, age, searchShoes) {\r\n    this.name = name;\r\n    this.age = age;\r\n    this.searchShoes = searchShoes || +prompt('Введи від 32 - 40');\r\n    this.myCinderella = function(searchShoes) {\r\n                    let shoes = 0;\r\n                    for (let key of searchShoes) {\r\n                        if(key.footSize === this.searchShoes) {\r\n                            shoes = key;\r\n                        }\r\n                    }\r\n                    document.write('Імя моєї попилюшки'+ ' ' + shoes.name);\r\n                }\r\n\r\n}\r\n\r\nlet vasja = new Princ('VAsja', 45,);\r\nconsole.log(vasja);\r\nvasja.myCinderella(cinderella);
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js b/../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js
--- a/../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js	
+++ b/../../05.11.2020-js-home_task-5-function_constructor-class/js/main.js	
@@ -284,41 +284,40 @@
 // -- функція повинна приймати масив попелюшок, та шукає ту котра йому підходить
 // ==============================================
 
-function Cinderella(name, age, footSize) {
-    this.name = name;
-    this.age = age;
-    this.footSize = footSize;
-}
+// function Cinderella(name, age, footSize) {
+//     this.name = name;
+//     this.age = age;
+//     this.footSize = footSize;
+// }
 
-let cinder1 = new Cinderella('Masha', 22, 36);
-let cinder2 = new Cinderella('Tanja', 35, 38);
-let cinder3 = new Cinderella('Olena', 20, 34);
-let cinder4 = new Cinderella('Olga', 45, 40);
-let cinder5 = new Cinderella('Anna', 27, 37);
-let cinder6 = new Cinderella('Diana', 34, 38);
-let cinder7 = new Cinderella('Vita', 28, 39);
-let cinder8 = new Cinderella('Nika', 20, 32);
-let cinder9 = new Cinderella('Sveta', 18, 33);
-let cinder10 = new Cinderella('Lysja', 19, 35);
+// let cinder1 = new Cinderella('Masha', 22, 36);
+// let cinder2 = new Cinderella('Tanja', 35, 38);
+// let cinder3 = new Cinderella('Olena', 20, 34);
+// let cinder4 = new Cinderella('Olga', 45, 40);
+// let cinder5 = new Cinderella('Anna', 27, 37);
+// let cinder6 = new Cinderella('Diana', 34, 38);
+// let cinder7 = new Cinderella('Vita', 28, 39);
+// let cinder8 = new Cinderella('Nika', 20, 32);
+// let cinder9 = new Cinderella('Sveta', 18, 33);
+// let cinder10 = new Cinderella('Lysja', 19, 35);
 
-let cinderella = [cinder1, cinder2, cinder3, cinder4, cinder5, cinder6, cinder7, cinder8, cinder9, cinder10];
+// let cinderella = [cinder1, cinder2, cinder3, cinder4, cinder5, cinder6, cinder7, cinder8, cinder9, cinder10];
 
-function Princ (name, age, searchShoes) {
-    this.name = name;
-    this.age = age;
-    this.searchShoes = searchShoes || +prompt('Введи від 32 - 40');
-    this.myCinderella = function(searchShoes) {
-                    let shoes = 0;
-                    for (let key of searchShoes) {
-                        if(key.footSize === this.searchShoes) {
-                            shoes = key;
-                        }
-                    }
-                    document.write('Імя моєї попилюшки'+ ' ' + shoes.name);
-                }
+// function Princ (name, age, searchShoes) {
+//     this.name = name;
+//     this.age = age;
+//     this.searchShoes = searchShoes || +prompt('Введи від 32 - 40');
+//     this.myCinderella = function(searchShoes) {
+//                     let shoes = 0;
+//                     for (let key of searchShoes) {
+//                         if(key.footSize === this.searchShoes) {
+//                             shoes = key;
+//                         }
+//                     }
+//                     document.write('Імя моєї попилюшки'+ ' ' + shoes.name);
+//                 }
 
-}
+// }
 
-let vasja = new Princ('VAsja', 45,);
-console.log(vasja);
-vasja.myCinderella(cinderella);
\ No newline at end of file
+// let vasja = new Princ('VAsja', 45,);
+// vasja.myCinderella(cinderella);
\ No newline at end of file
Index: ../../03.11.2020-JS-Function-Home_Task/js/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// // - створити функцію яка виводить масив\r\n\r\n// let myArray = [5, 6, 2, 9 ,4];\r\n\r\n// function showArray (my) {\r\n//     console.log(my);\r\n// }\r\n\r\n// // showArray(myArray);\r\n\r\n// // - створити функцію яка заповнює масив рандомними числами та виводить його. Для виведення використати попвередню функцію.\r\n\r\n// function randomArray (lenght) {\r\n//     let myArray = [];\r\n//     for (let i = 0; i < lenght; i++) {\r\n//        myArray.push(Math.floor(Math.random() *12))  \r\n//     }\r\n//     return myArray;\r\n// }\r\n// const arra1 = randomArray(10);\r\n// showArray(arra1);\r\n\r\n// // - створити функцію яка приймає три числа та виводить та повертає найменьше.\r\n\r\n// function minNumber (a,b,c) {\r\n//     console.log(Math.min(a,b,c)); \r\n// }\r\n// minNumber(9,6,8);\r\n\r\n// // - створити функцію яка приймає три числа та виводить та повертає найбільш\r\n\r\n// function maxNumber (a,b,c) {\r\n//     console.log(Math.max(a,b,c)); \r\n// }\r\n// maxNumber(9,6,8);\r\n\r\n// - створити функцію яка приймає будь-яку кількість чисел, повертає найменьше, а виводить найбільше\r\n\r\n// function showMax () {\r\n//     let min = arguments[0];\r\n//     let max = arguments[0];\r\n//     for (let key of arguments) {\r\n//         if(key > max) {max = key};\r\n//         if(key < min) {min = key};\r\n//     }\r\n//     console.log(max);\r\n//     return min;\r\n// }\r\n\r\n// let min = showMax(3,6,7,9);\r\n// console.log(min);\r\n\r\n\r\n// - створити функцію яка повертає найбільше число з масиву\r\n\r\n// let maxArray = [5, 8, 2, 90, 46, 4];\r\n\r\n// function maxNumArr (maxArray){\r\n//     let maxValue = maxArray[0];\r\n\r\n//    for (let i = 0; i < maxArray.length; i++) {\r\n//        if(maxArray[i] > maxValue) {\r\n//            maxValue = maxArray[i]\r\n//        }\r\n//     }   \r\n\r\n//     console.log(maxValue);\r\n// }\r\n// maxNumArr(maxArray);\r\n\r\n// // - створити функцію яка повертає найменьше число з масиву\r\n\r\n// let minArray = [5, 8, 2, 90, 46, 4];\r\n\r\n// function minNumArr (minArray){\r\n//     let minValue = minArray[0];\r\n\r\n//    for (let i = 0; i < minArray.length; i++) {\r\n//        if(minArray[i] < minValue) {\r\n//            minValue = minArray[i]\r\n//        }\r\n//     }   \r\n\r\n//     console.log(minValue);\r\n// }\r\n// minNumArr(minArray);\r\n\r\n// - створити функцію яка приймає масив чисел та складає значення елементів масиву та повертає його.\r\n\r\n// let sumArray = [5, 8, 2, 90, 46, 4];\r\n// let sumNum = 0;\r\n\r\n// function sumNumber (sumArray) {\r\n//     for (let i = 0; i < sumArray.length; i++) {\r\n//         sumNum += sumArray[i];   \r\n//     }  \r\n//     return sumNum;\r\n// }\r\n// sumNumber(sumArray);\r\n// console.log(sumNum);\r\n\r\n// // - створити функцію яка приймає масив чисел та повертає середнє арифметичне його значень.\r\n// let mediumNamber = 0;\r\n// function mediumNum (sumArray) {\r\n//     mediumNamber = sumNum / sumArray.length;\r\n//     return mediumNamber;\r\n// }\r\n// mediumNum(sumArray);\r\n// console.log(mediumNamber);\r\n\r\n// // - Створити функцію яка приймає масив будь яких объектів, та повертає значення кількості об'єктів в масиві\r\n\r\n// let avto = [\r\n//     {production: 'toyota', power: 67, color: 'black', year: 2010},\r\n//     {production: 'mazda', power: 86, color: 'gray', year: 2015},\r\n//     {production: 'opel', power: 90, color: 'red', year: 2013},\r\n//     {production: 'bmw', power: 70, color: 'black', year: 2009},\r\n//     {production: 'citroen', power: 83, color: 'gray', year: 2017},\r\n//     {production: 'renault', power: 97, color: 'red', year: 2019},\r\n//     {production: 'honda', power: 80, color: 'black', year: 2000},\r\n//     {production: 'kia', power: 65, color:'gray', year: 2016},\r\n//     {production: 'audi', power: 91, color: 'red', year: 2004},\r\n//     {production: 'mercedes', power: 100, color: 'black', year: 2017}\r\n// ];\r\n\r\n// const sumAvto = (avto) => avto.length;\r\n// const sumObjAvto = sumAvto(avto);\r\n\r\n// console.log(sumObjAvto);\r\n\r\n// // - Створити функцію яка приймає масив будь яких объектів, та повертає загальн кількість полів в них\r\n\r\n// let avto1 = [\r\n//     {production: 'toyota', power: 67, color: 'black', year: 2010},\r\n//     {production: 'mazda', power: 86, color: 'gray', year: 2015},\r\n//     {production: 'opel', power: 90, color: 'red', year: 2013},\r\n//     {production: 'bmw', power: 70, color: 'black', year: 2009},\r\n//     {production: 'citroen', power: 83, color: 'gray', year: 2017},\r\n//     {production: 'renault', power: 97, color: 'red', year: 2019},\r\n//     {production: 'honda', power: 80, color: 'black', year: 2000},\r\n//     {production: 'kia', power: 65, color:'gray', year: 2016},\r\n//     {production: 'audi', power: 91, color: 'red', year: 2004},\r\n//     {production: 'mercedes', power: 100, color: 'black', year: 2017}\r\n// ];\r\n\r\n\r\n// function allNum (avto1) {\r\n//     let a = 0;\r\n//     for (const keyArr of avto1) {\r\n//         for (const key in keyArr) {\r\n//             a++;\r\n//             }\r\n//         }\r\n//     return a;\r\n// }\r\n// const avtoNum = allNum(avto1);\r\n// console.log(avtoNum);\r\n\r\n// - створити функцію  яка скаладає значення елементів з однаковими індексами  та повертає новий результуючий масив.\r\n//   Приклад\r\n//   [1,2,3,4]\r\n//   [2,3,4,5]\r\n//   результат\r\n//   [3,5,7,9]\r\n\r\n// let arr1 = [1,2,3,4,7];\r\n// let arr2 = [2,3,4,5,9];\r\n\r\n// function sumArr (arr1, arr2) {\r\n//     let arr3 = [];\r\n//     for (let i = 0; i < arr1.length; i++) {\r\n//         arr3.push(arr1[i] + arr2[i]);\r\n//     }\r\n//     return arr3;\r\n// }\r\n// const sumArray2 = sumArr(arr1, arr2);\r\n// console.log(sumArray2);\r\n\r\n// - *** приймає масив та число \"i\", та міняє місцями об`єкт який знаходиться в індексі \"i\" на \"i+1\"\r\n\r\n// let numberArray3 = [1,2,3,5,7,9];\r\n\r\n// function newArr (numberArray3, i) {\r\n//     let numberArray4 = [...numberArray3];\r\n//     if (i < numberArray4.length-1) {\r\n//         let sum = numberArray4[i];\r\n//         numberArray4[i] = numberArray4[i+1];\r\n//         numberArray4[i+1] = sum;\r\n//     }\r\n//     return numberArray4;\r\n// }\r\n\r\n// const numberArray5 = newArr(numberArray3, 3);\r\n// console.log(numberArray3);\r\n// console.log(numberArray5);\r\n\r\n// - *** створити функцію яка буде переносити елементи з значенням 0 у кінець маисву. Зберігаючи при цьому порядок не нульових значень.\r\n// Двожина масиву від 2 до 100\r\n// Приклад\r\n// [1,0,6,0,3] => [1,6,3,0,0]\r\n// [0,1,2,3,4] => [1,2,3,4,0]\r\n// [0,0,1,0]   => [1,0,0,0]\r\n\r\n// function numArr2 (numArr) {\r\n//     let arrZero = [];\r\n//     let arrOne = [];\r\n//     for (const key of numArr) {\r\n//         key === 0 ? arrZero.push(0) : arrOne.push(key);  \r\n//     }\r\n//     return arrOne.concat(arrZero);\r\n// }\r\n// console.log(numArr2([1,0,6,0,3]));\r\n// console.log(numArr2([0,1,2,3,4]));\r\n// console.log(numArr2([0,0,1,0]));\r\n\r\n\r\n\r\n\r\n// Створити функцію яка :\r\n// - Додає в боді блок з текстом \"Hello owu\"\r\n// - Додає в боді елемент з текстом . Тип елементу та текст отримати через аргументи\r\n// let text = document.createElement('h1');\r\n// text.innerText = 'Hello owu Hello';\r\n\r\n// function textInBody (arguments) {\r\n//     let block = document.createElement('div');\r\n//     block.innerText = 'Hello owu';\r\n//     document.body.appendChild(block);\r\n//     document.body.appendChild(arguments);\r\n// }\r\n// textInBody(text);\r\n// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.\r\n// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали. Всі властивості авто в обному блоці\r\n// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.\r\n// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали.\r\n// Для кожної властивості створити всередені блока автомоблія свій блок\r\n\r\n\r\n// let avto2 = [\r\n//     {production: 'toyota', power: 67, color: 'black', year: 2010},\r\n//     {production: 'mazda', power: 86, color: 'gray', year: 2015},\r\n//     {production: 'opel', power: 90, color: 'red', year: 2013},\r\n//     {production: 'bmw', power: 70, color: 'black', year: 2009},\r\n//     {production: 'citroen', power: 83, color: 'gray', year: 2017},\r\n//     {production: 'renault', power: 97, color: 'red', year: 2019},\r\n//     {production: 'honda', power: 80, color: 'black', year: 2000},\r\n//     {production: 'kia', power: 65, color:'gray', year: 2016},\r\n//     {production: 'audi', power: 91, color: 'red', year: 2004},\r\n//     {production: 'mercedes', power: 100, color: 'black', year: 2017}\r\n// ];\r\n\r\n// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.\r\n// function avtoInId (avto) {\r\n//     let block = document.getElementById('avto');\r\n//     let list = document.createElement('ul');\r\n//         block.appendChild(list);\r\n//     for (let i = 0; i < avto.length; i++) {\r\n//        let car = avto[i];\r\n//        let listAvto = document.createElement('li');\r\n//        listAvto.innerHTML = car.production;\r\n//        list.appendChild(listAvto);\r\n//     }\r\n// }\r\n// avtoInId(avto2);\r\n\r\n// function avtoBlock (avto) {\r\n//     let block = document.getElementById('avto');\r\n//     for (let i = 0; i < avto.length; i++) {\r\n//         let avtoItem = avto[i];\r\n//         let blockDiv = document.createElement('div');\r\n//         blockDiv.innerText = `${avtoItem.production} ${avtoItem.power} ${avtoItem.color} ${avtoItem.year}`;\r\n//         block.appendChild(blockDiv);\r\n//     }\r\n// }\r\n// avtoBlock(avto2);\r\n\r\n// function avtoInBlock (avto) {\r\n//     let block = document.getElementById('avto');\r\n    \r\n    \r\n//     for (let i = 0; i < avto.length; i++) {\r\n        \r\n//       for (const key in avto[i]) {\r\n//         let blockDiv = document.createElement('div');\r\n//             blockDiv.innerHTML = `${key} : ${avto[i][key]}`;\r\n//             block.appendChild(blockDiv);\r\n//           }  \r\n//       }\r\n//     }\r\n   \r\n// avtoInBlock(avto2);\r\n\r\n// **- функція приймає 2 масиви з рівною кількістю об'єктів та з'єднює в один об'єкт користувача та місто з відповідними \"id\" та \"user_id\",\r\n// та повертає масив цих з'єднаних об'єктів.\r\n// Приклад масивів:\r\n\r\n// let usersWithId = [\r\n//     {id: 1, name: 'vasya', age: 31, status: false}, \r\n//     {id: 2, name: 'petya', age: 30, status: true}, \r\n//     {id: 3, name: 'kolya', age: 29, status: true}, \r\n//     {id: 4, name: 'olya', age: 28, status: false}\r\n// ];\r\n\r\n// let citiesWithId = [\r\n//     {user_id: 3, country: 'USA', city: 'Portland'}, \r\n//     {user_id: 1, country: 'Ukraine', city: 'Ternopil'}, \r\n//     {user_id: 2, country: 'Poland', city: 'Krakow'}, \r\n//     {user_id: 4, country: 'USA', city: 'Miami'}\r\n// ];\r\n\r\n// function usersCities (userArray, cityArray) {\r\n//     let users = JSON.parse(JSON.stringify(userArray));\r\n//     let cities = JSON.parse(JSON.stringify(cityArray));\r\n//         for (const city of cities) {\r\n//           for (const user of users) {\r\n//               if (user.id === city.user_id) {\r\n//                user.adress = city;\r\n//            }\r\n//         }  \r\n//     }\r\n//     return users;\r\n// }\r\n\r\n// let userCitiesId = usersCities (usersWithId, citiesWithId);\r\n// console.log(userCitiesId);\r\n\r\n\r\n// function usersCities (usersWithId, citiesWithId) {\r\n//     let users = [];\r\n//         for (const city of citiesWithId) {\r\n//           for (const user of usersWithId) {\r\n//               if (user.id === city.user_id) {\r\n//                     user.adress = city;\r\n//                     users.unshift(user);\r\n//             }\r\n//         }  \r\n//     }\r\n//     return users;\r\n// }\r\n\r\n// let userCitiesId = usersCities (usersWithId, citiesWithId);\r\n// console.log(userCitiesId);\r\n\r\n\r\n// ***- беремо завдання з правилами з укроку №3 :\r\n// Та робимо це функцією.При цьому правила отримувати через аргумент.\r\n// \"Є масив котрий характеризує правила. Створити скрипт який ітерує цей масив, та робить з кожне правило в окремому блоці.\r\n// При цому в блоці, номер правила записати в свій блок, текст правила записати в свій окремий блок.\r\n// Результатом відпрацювання скріпта повинна бути структура яка міститься в блоці wrap файла rule.html\r\n\r\n\t\t\tlet rules = [\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Первое правило Бойцовского клуба.',\r\n\t\t\t\t\tbody: 'Никому не рассказывать о Бойцовском клубе.'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Второе правило Бойцовского клуба.',\r\n\t\t\t\t\tbody: 'Никогда никому не рассказывать о Бойцовском клубе.'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Третье правило Бойцовского клуба.',\r\n\t\t\t\t\tbody: 'В схватке участвуют только двое.'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Четвертое правило Бойцовского клуба.',\r\n\t\t\t\t\tbody: 'Не более одного поединка за один раз.'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Пятое правило Бойцовского клуба.',\r\n\t\t\t\t\tbody: 'Бойцы сражаются без обуви и голые по пояс.'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Шестое правило Бойцовского клуба.',\r\n\t\t\t\t\tbody: 'Поединок продолжается столько, сколько потребуется.'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Седьмое правило Бойцовского клуба.',\r\n\t\t\t\t\tbody: 'Если противник потерял сознание или делает вид, что потерял, или говорит «Хватит» — поединок окончен.'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: 'Восьмое и последнее правило Бойцовского клуба.',\r\n\t\t\t\t\tbody: 'Новичок обязан принять бой.'\r\n\t\t\t\t},\r\n\r\n\t\t\t];\r\n\r\n\r\nlet wrap = document.getElementById('wrap');\r\n\r\n\r\nfunction textInBlock(arguments) {\r\n\r\n    for (let i = 0; i < arguments.length; i++) {\r\n        const element = arguments[i];\r\n        let rulesBlock = document.createElement('div');\r\n        let h2 = document.createElement('h2');\r\n        let p = document.createElement('p');\r\n        wrap.appendChild(rulesBlock);\r\n        wrap.appendChild(h2);\r\n        wrap.appendChild(p);\r\n        rulesBlock.className = `rules rule${i + 1}`;\r\n        // rulesBlock.classList.add('rules');\r\n        // rulesBlock.classList.add(`bab rule${i + 1}`);\r\n        h2.innerText = element.title;\r\n        p.innerText = element.body; \r\n    }\r\n   \r\n}\r\ntextInBlock(rules);\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../03.11.2020-JS-Function-Home_Task/js/main.js b/../../03.11.2020-JS-Function-Home_Task/js/main.js
--- a/../../03.11.2020-JS-Function-Home_Task/js/main.js	
+++ b/../../03.11.2020-JS-Function-Home_Task/js/main.js	
@@ -399,8 +399,6 @@
         wrap.appendChild(h2);
         wrap.appendChild(p);
         rulesBlock.className = `rules rule${i + 1}`;
-        // rulesBlock.classList.add('rules');
-        // rulesBlock.classList.add(`bab rule${i + 1}`);
         h2.innerText = element.title;
         p.innerText = element.body; 
     }
